# Two sum

"""
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Output: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
 

Constraints:

2 <= nums.length <= 105
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.
"""

import unittest


def Two_Sum(nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        h = {}
        for i, num in enumerate(nums):
            n = target - num
            if n not in h:
                h[num] = i
            else:
                return [h[n], i]


# DO NOT TOUCH THE BELOW CODE


class TwoSum(unittest.TestCase):
    def test_1(self):
        self.assertEqual(Two_Sum([2,7,11,15],9), [0,1])

    def test_2(self):
        self.assertEqual(Two_Sum([3,2,4],6), [1,2])


if __name__ == '__main__':
    unittest.main(verbosity=2)
